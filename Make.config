# -*- makefile -*-

SHELL = /bin/sh

VPATH = $(SRCDIR)

# Binary utilities.
# Priority: cross-toolchain (i686-elf-* or i386-elf-*) -> host multilib (gcc -m32)

# Try to find cross-toolchain first
ifneq ($(strip $(shell command -v i686-elf-gcc 2> /dev/null)),)
  CC = i686-elf-gcc
  LD = i686-elf-ld
  OBJCOPY = i686-elf-objcopy
  AR = i686-elf-ar
  RANLIB = i686-elf-ranlib
else
  ifneq ($(strip $(shell command -v i386-elf-gcc 2> /dev/null)),)
    CC = i386-elf-gcc
    LD = i386-elf-ld
    OBJCOPY = i386-elf-objcopy
    AR = i386-elf-ar
    RANLIB = i386-elf-ranlib
  else
    # Fall back to host multilib
    CC = gcc -m32
    LD = ld -melf_i386
    OBJCOPY = objcopy
    AR = ar
    RANLIB = ranlib
  endif
endif

ifeq ($(strip $(shell command -v $(CC) 2> /dev/null)),)
$(warning *** Compiler ($(CC)) not found.  Did you set $$PATH properly?  Please refer to the Getting Started section in the documentation for details. ***)
endif

# Compiler and assembler invocation.
DEFINES =
WARNINGS = -Wall -W -Wstrict-prototypes -Wmissing-prototypes -Wsystem-headers -Wno-frame-address -Wno-nonnull-compare
CFLAGS = -g -msoft-float -O -fno-builtin -fno-omit-frame-pointer
CPPFLAGS = -nostdinc -I$(SRCDIR) -I$(SRCDIR)/lib
ASFLAGS = -Wa,--gstabs
LDFLAGS = 
DEPS = -MMD -MF $(@:.o=.d)

# Turn off -fstack-protector, which we don't support.
ifeq ($(strip $(shell echo | $(CC) -fno-stack-protector -E - > /dev/null 2>&1; echo $$?)),0)
CFLAGS += -fno-stack-protector
endif

# Turn off PIE (Position Independent Executable) for Ubuntu 24+ compatibility.
CFLAGS += -fno-pie -fno-PIE
LDFLAGS += -no-pie

# Turn off --build-id in the linker, which confuses the Pintos loader.
ifeq ($(strip $(shell $(LD) --help | grep -q build-id; echo $$?)),0)
LDFLAGS += -Wl,--build-id=none
endif

%.o: %.c
	$(CC) -c $< -o $@ $(CFLAGS) $(CPPFLAGS) $(WARNINGS) $(DEFINES) $(DEPS)

%.o: %.S
	$(CC) -c $< -o $@ $(ASFLAGS) $(CPPFLAGS) $(DEFINES) $(DEPS)
